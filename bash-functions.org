#+name: license-preamble
#+begin_src sh :exports none 
# Library for creating shell completions from clon specifications.
# Copyright (C) 2018 Pieter Hijma

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#+end_src

#+property: header-args :comments link :tangle-mode (identity #o400) :results output silent :mkdirp yes

* Library of bash functions
  :PROPERTIES:
  :header-args+: :tangle "bash_functions/completion_functions.bash"
  :END:

The following functions will be prepended to any completion specification:

#+begin_src sh :exports none :noweb yes
<<license-preamble>>
#+end_src

#+begin_src sh :eval no 
_first_previous() {
    for (( idx=${#COMP_WORDS[@]}-2 ; idx>0 ; idx-- )) ; do
	for i in $*
	do
	    if [ $i = ${COMP_WORDS[$idx]} ]
	    then
		echo ${COMP_WORDS[$idx]}
		return
	    fi
	done
    done

    echo ""
}

_all_previous() {
    local result=""
    
    for (( idx=${#COMP_WORDS[@]}-2 ; idx>0 ; idx-- )) ; do
	for i in $*
	do
	    if [ $i = ${COMP_WORDS[$idx]} ]
	    then
		result="${COMP_WORDS[$idx]} $result"
	    fi
	done
    done

    echo $result
}

_combine() {
    local list1=$1
    local list2=$2

    IFS=' ' read -r -a list1_array <<< "$list1"
    IFS=' ' read -r -a list2_array <<< "$list2"
    local combined=( "${list1_array[@]}" "${list2_array[@]}" )

    echo "${combined[@]}"
}

_get_unique() {
    local list1=$1
    local list2=$2

    IFS=' ' read -r -a list1_array <<< "$list1"
    IFS=' ' read -r -a list2_array <<< "$list2"
    local combined=( "${list1_array[@]}" "${list2_array[@]}" )
    IFS=$'\n' sorted=$(sort <<<"${combined[*]}")
    unique=$(uniq -u <<<"${sorted[*]}")
    unset IFS

    echo "${unique[@]}"
}
#+end_src
